CreateADUsers.ps1 file lesz az, amelyben az Active Directory-s környzetbe tudunk automatizáltan akárhány felhasználót felvenni.

Az ADUC=active directory users and computer MMC=microsofz management console programjával történõ létrehozási lehetõséget szeretnénk a Power Shell script-ünkkel termelékenyebbé tenni

(maga a script úgy készül el, hogy paraméterként lehet megadni, hogy mennyi user felvételét szeretnénk. Ha elmarad a paramétermegadás, akkor automatikusan 100 felhasználó jön a program révén létre)

Az AD-ben a felhasználók a Users alkategóriába kerülnek alapértelmezés szerint, azonban megtehetjük, hogy az AD belül egy ún. szervezeti egységet/organization unit hozunk létre és a felhasználók annak alérendeltjeiként keletkeznek.

(Az Active Directory a tartományi mûködési körülményeket egy fajta hierarchiaként kezeli, ami az OU=organization unit esetén a saját körülményeink között valahogy így lenne kifejezhetõ:

DC=domain content, OU, CN=common name rövidítések alapján:

OU=Diaksag,DC=projektfeladat,DC=pelda

amibõl lényegében az olvasható ki: a pelda TLD alárendeltje a projektfeladat tartomány, amin belül pedig létezik egy Diaksag elnevezésû szervezeti egység.

Egy program/parancs paraméterének/argumentumának nevezzük azt, amit az indításakor, mint bemeneti adatot határozhatunk meg.

pl.: .\CreateADUsers.ps1 45 amelynél a 45 mint paraméter jeleni meg és azt fogja eredményezni, hogy 45 felhasználó jön létre a projektfeladat.pelda tartomány Diaksag nevezetû szervezeti egységében
Amennyiben nem adunk meg számot, akkor pedig 100 user "készül".

A PS-ben lényegében felhasználhatók a .net Framework adattípusai, így pl. [parameter...] illetve [int] és ezekkel a DEKLARÁCIÓBAN szereplõ változó sajátosságait leszünk képesek precízen pontosítani. (pl. az int, mint adattípus, sajátosságként azt határozza meg a programunkban használt UserDb esetén, hogy egész számról van szó, ami pozitív és negatív is lehet, ami nagyságrendjét tekintve 32 bit felhasználásával történõ adattárolást biztosít: -2^(n-1) - +(2^(n-1))-1 ha n=32, akkor -2^31-tõl +(2^31)-1-ig terjedõ egész számokat jelent: -2147483648-tól +2147483647-ig)

Az Active Directory felhasználók azonosítói: pl username nem tartalmazhat ékezetes betût (kivétel az ún. kijelzett név/display name, amiben viszont elõfordulhatnak) emiatt a file-ból származó neveket ékezetlenítenünk is kell.

A Windows 2012 Server esetén a tartományi felhasználókat <vezeteknev>.<utonev> módon szeretnénk azonosítani, tehát ekkor már ékezetes betûk nem szerepelhetnek. A modern Windows szervereknél, a felhasználói azonosító lehet email-cím-szerû is <vezeteknev>.<utonev>@projektfeladat.pelda (a szokványos rendszerhasználat és az elektronikus levelezés szerves összekapcsolódását mutatva)
A vezeteknev és utonev megfelelõ lehet csupa kisbetûsen (NOHA az e-mail protokollok: pop3, spop3, imap, smtp, ssmtp) nem tesznek különbséget nagy- és kisebetû között (vagyis az ékezetlenítés mellett bizonyos célokra használt esetekben a kisbetûsre konvertálás is kell)

A Get-ADDomain cmdlet-tel kimerítõ információhalmazhoz jutunk a tartománnyal összefüggésben.
(Tulajdonképpen ez a cmdlet egy OBJEKTUM-ként tekint a tartományra, amely objektumnak számos tulajdonsága/property-je/attribútuma és viselkedése/metódusa lehet. Hogy ezekhez férhessünk a cmdlet-et kerekzárójelek közé fogva érhetjük el, hogy végülis rendelkezésünkre álljon az objektum maga és így már annak ADAT és KÓD vonatkozásaihoz könnyedén hozzáférhetünk.

(Get-ADDomain).DNSRoot pl. megmondja a projektfeladat.pelda tartománynevet)

A felhasználói jelszavakkal kapcsolatban rendelkezik a password policy/jelszó házirend

gpedit.msc a csoport-házirend szerkesztõ konzolalkalmazás, amiben megtalálható az értelmezett jelszóval kapcsolatos követelmények rendszere.

$i++ azt jelenti, mint a $i=$i+1, vagyis az i változó értékének eggyel történõ megnövelése, amit szokás inkrementálásnak is mondani. A ++ operátor lehet PREFIX és POSTFIX, vagyis állhat az operandus elõtt és után. Így végülis nem minden körülmények között egyenértékû a $i++ és a ++$i hivatkozás. (esetünkben az enelkuli tömbnél az i változó aktuális értéke alapján választottuk ki a megfelelõ ékezetnélküli betût, majd ezt követõen növeltük az i változó értékét 1-gyel)

Mivel a nyersanyagunkból véletlenszerûen kiválasztott tételek alapján jön létre egy-egy felhasználó azonosíója, nincs kizárva, hogy egyformaság adódjon. Márpedig két felhasználó azonos usernévvel nem lesz kialakítható a rendszerben, ennek kezelésére a következõt használjuk:

<vezeteknev>.<utonev>1 azt jelöli, hogy volt már egy ugyanilyen névvel, ezért megkülönböztetésül egy számot használunk: 1,2,3,...

Az AltGr+7-tel egy ún balra dõlõ aposztrófot kapunk, amit lehetõségünk lesz arra használni a PS-ben, hogy egy egyébként egysorba írandó tartalmat folytatólagosan több sorosan írhassunk
(Linux/UNIX-ban ugyanezzel a szimbólummal körülhatárolva egy parancsot tudjuk kikényszeríeni annak végrehajtását)

