A megoldott feladat egy olyan hálózati szolgáltatási környezet kialakítása volt, amelyben egy Linux Debian operációs rendszerû két hálózati kártyával: NAT az internetelérés és egy Belsõ hálózat a LAN-ba csatlakozás érdekében; rendelkezõ szerver és három Windows 10 Pro operációs rendszerû, csak Belsõ hálózat elérését biztosító hálózati kártyával rendelkezõ kliens együttmûködése lesz bemutatható.
A szerver DHCP szolgáltatást nyújt a kliensek számára, hogy azok rendelkezzenek megfelelõ IPv4 címmel és tudják milyen alapértelmezett átjárót, valamint DNS szervert használhatnak hálózati kommunikációjuk során. Az elõbbi a más hálózatokba: pl. internet; eljutás miatt, az utóbbi pedig a szöveges azonosítók/címek: pl. index.hu; által történõ eszközelérés biztosítása érdekében szükséges.
A szerver a LAN gépei számára biztosítja továbbá az internet elérésének megosztását, ezért lényegében Router funkciót is ellát, ami a hálózati címfordítás szükségessége következtében kell, hogy a kliensektõl induló kérések úgy találjanak el egy interneten mûködõ szolgáltatóhoz, hogy annak válasza biztosan megérkezhessen a részükre.
Mindezeken túl a centralizált adminisztráció biztosítása végett a szerver egy helyi tartományi környezet: cegunk.lan; Active Directory tartományvezérlõi feladatait is ellátja, hogy az adatbázisaiban központilag legyenek nyilvántarthatók a tartományi környezet felhasználói és számítógépei egyaránt.

(Címzések: MAC-ADDRESS, IP cím, domain-name mindenféleképpen az a legfontosabb, hogy garantálják az egyediséget, az egyértelmû megkülönböztetést.

No, de mi a helyzet a SOHO router-eknél alkalmazható MAC-ADDRESS klónozással?
Ilyenkor mondjuk az ISP által szabott feltételek miatt az elsõként csatlakoztatott eszköz pl. egy asztali számítógép MAC-ADDRESS-e kerülhet beállításra, azért hogy eleget tehessünk az internetszolgáltató elvárásainak.
                ----------
        ISP     |        |   LAN: itt van az az asztali gép, amelynek a MAC-ADDRESS-e beállításra került az
ABCDEF123456    ----------   ISP-s oldal hálózati csatolójához: ABCDEF123456

Ha a MAC-ADDRESS 6 byte-os, akkor hány különbözõ cím lehetséges az ezek alapján képezhetõ egyöntetû hálózatokban: 2^48=281 474 976 710 656)

iptables
(man iptables)

A kommunikáció során továbbítandó nagyobb adategységeket (akár GB-os terjedelem) kisebb részekre bontva (néhány ezer byte) küldünk ténylegesen.
A csomagok az OSI rétegei között más-más néven szerpelhetnek: így például a 2. réteg, az ADATKAPCSOLATI esetén FRAME-nek nevezzük, míg a 3. réteg, a HÁLÓZATI packet elnevezést használ.

FRAME
-------------------------------------------------------------------------------------
| forrás MAC | cél MAC | egyéb jellemzõk és maga az adattartalom | ellenõrzõ összeg |
-------------------------------------------------------------------------------------

PACKET
----------------------------------------------------------------------------------------------------------
| forrás IP | cél IP | forrás MAC | cél MAC | egyéb jellemzõk és maga az adattartalom | ellenõrzõ összeg |
----------------------------------------------------------------------------------------------------------

Mivel az IPTABLES leírása a PACKET-et használta vélelmezhetjük, hogy ez a HÁLÓZATI rétegben funkcionál.

Szokás az iptables-t csomagszûrûnek nevezni, ami annyiban nem feltétlen állja meg a helyét, hogy lehetséges nemcsak szûrést, hanem módosítást is végezhet.

(szûrés lényegében egy sokaság bizonyos feltételek szerinti szûkítése)

Ez a fajta funkcionalitás nagyon hasonlatos a TÛZFALAK-nál mûködtetett megoldásokhoz, nem különben a hálózati eszközök CLI-jében szabályozható ACL-ekhez=access control list.


Amint látható volt, a Windows OS-eknél az ICMP=internet control message protocol nem engedélyezett, ha azonban a tûzfal esetén bejövõ szabályként az ICMP jellemzõvel ellátott csomagokat engedélyezzük, máris mûködik az ilyen számítógép ping-elhetõsége.

Hasonlóképpen tudunk szabályszerûségeket megragadni a Linux/UNIX rendszerekben az iptables segítségével.

A szûrési szabályok az iptables esetén különféle táblák (TABLE), különféle láncaihoz (CHAIN) lesznek hozzáadhatók.

Az iptables által használt táblák a következõk lehetnek:

- filter (ez az alapértelmezés, emiatt ha nem szerepel akkor az adott szabály ehhez a táblához tartozóként veszi figyelembe)

- nat (ami kimondottan a hálózati címfordításhoz kapcsolódó szabályok meghatározását teszi lehetõvé)

- mangle

- raw

- security

Mivel láttuk, hogy a különbözõ táblák más-más láncokkal rendelkeznek ezért érdemes ezeket is felsorolni:

- PREROUTING (általában olyan szabályok kerülnek ide, amelyek az útválasztás elõtt kell kifejtsék hatásukat)
- INPUT (a bejövõ csomagokkal kapcsolatos szabályokat tartalmazza)
- FORWARD (az áthaladó csomagokkal kapcsolatos szabály megadására szolgál)
- OUTPUT (a kimenõ csomagok szabályainak elkülönítésére való)
- POSTROUTING (az útválasztás utáni helyzetben alkalmazandó szabályokat tartalmazza)

Abban az esetben, amikor egy aktuálisan megvizsgált csomag illeszkedik valamely megfogalmazott szabályra, annak tevékenysége/következménye egy ún. ugrással (JUMP) lesz definiálható.


Annak érdekében, hogy a LAN ROUTER-eként használ Debian Linux OS-û gépen kilépõ (az internet felé) üzenetcsomagok esetén megtörténjen a LAN-os IPv4 cím, globális tehát lényegében az internet felõl is látható címre való lecserélése, akövetkezõ megfogalmazással éltünk:

iptable -t nat -A POSTROUTING -o enp0s3 -j MASQUERADE, ami a következõt jelenti.

1. A szabály a nat elnevezésû tábla (-t nat), POSTROUTING láncába kerüljön (-A POSTROUTING, ahol A=add jelentéssel bír)

2. A szûrési szabály az esetünkben az, hogy az adott csomag kifelé halad-e a megadott hálózati csatolón (-o enp0s3) Itt o=output az enp0s3 a Linux elnevezése az ethernet network pci slot vonatkozásában, vagyis egész precízen leírja, hogy a megadott hálózati kártya a PCI eszközcsatlakozók közül az elsõ, tehát számítógépes környezetben 0.-ba van bekötve, annak is a 4. slot-jába, ami a 0-tól történõ sorszámozás miatt jelenik meg 3-asként

3. A teendõ pedig az ún. maszkolás (-j MASQUERADE), ami természetesen azt jelenti, hogy megjegyzés mellett le kell cserélni a csomagban eredetileg szereplõ forrás címet az enp0s3 hálózati kártya publikus címére.

(NAT-olás tehát egy olyan mûvelet, aminél az ezt végzõ megjegyzi, hogy milyen forráscímet cserélt le egy csomagban, ami egy meghatározott cél cím felé haladt. Amikor a válasz érkezik a "megcélzott" helyrõl, akkor fel kell ismerni, hogy egy erre a címre küldött csomagban az enp0s3 címére, ahova egyébként befut a válasz, kellett cserélni az eredeti LAN-os címet /természtesen az a bizonyos megjegyzés úgy történik, hogy eltárolásra kerül a forrás és a cél cím, hogy utóbbi figyelve legyen egy helyi cím meadható, hogy az internetrõl jövõ tartalom végülis a rendeltetési helyére kerüljön.

forrás            cél               forrás              cél
-----------------------------------------------------------------------------------------------------------
| 223.255.255.244 | 213.181.199.16 | 08-00-27-B6-F1-62 | 74-4D-28-5C-52-2D | ....                         |
-----------------------------------------------------------------------------------------------------------
Mielõtt ténylegesen kilépne az enp0s3 eszközön keresztül a csomag megtörténik a szükséges cím csere:

-----------------------------------------------------------------------------------------------------------
| 10.0.2.15       | 213.181.199.16 | 08-00-27-AF-57-A6 | 74-4D-28-5C-52-2D | ....                         |
-----------------------------------------------------------------------------------------------------------

Azonban a cserével egyidejûleg megjegyzi, hogy ekkor:

forrás: 223.255.255.244 (08-00-27-B6-F1-62)
cél: 213.181.199.16 (74-4D-28-5C-52-2D)

Majd, amikor jön vissza index.hu-ról a tartalom:

-----------------------------------------------------------------------------------------------------------
| 213.181.199.16  | 10.0.2.15       | 74-4D-28-5C-52-2D | 08-00-27-AF-57-A6 | ....                        |
-----------------------------------------------------------------------------------------------------------

Ekkor kell felismerni az eltároltak között, hogy, amikor kifele ment a cucc, akkor a 213.181.199.16 esetén a 223.255.255.244 került lecserélésre

Jön a visszacsere:

-----------------------------------------------------------------------------------------------------------
| 213.181.199.16  | 223.255.255.244 | 74-4D-28-5C-52-2D | 08-00-27-B6-F1-62 | ....                        |
-----------------------------------------------------------------------------------------------------------

Ezek után már nyilvánvalóan el tud jutni a REQUEST-et megfogalmazó géphez a RESPONSE.


Nézzünk néhány iptables-szel megfogalmazható csomagszûrési megoldást:

iptables -A INPUT -s 223.255.255.244 -j ACCEPT

(ami azt jelenti, hogy a 223.255.255.244 forrás címrõl (source address - s) beérkezõ csomagot elfogadjuk (ACCEPT)

iptables -A INPUT -s 223.255.255.244 -j DROP
(itt meg elutasítjuk(DROP))

-s a forrás, -d cél cím megadását jelenti

iptables -A INPUT -d 10.0.2.15 -p tcp --dport 22 -j DROP

(ami lényegében a Linux virtuális gépünk IPv4 címére, mint cél címre irányuló SSH kapcsolat létesítést akadályoz meg. Az SSH a 22-es TCP porton mûködik ezért kellett a -p tcp és a --dport 22 megfogalmazás, hiszen dport, annyit tesz: destination por/cél port)

Ahhoz, hogy ténylegesen mûködjön az iptables-ös megoldás, mondjuk a számítógép újraindítása után is, az aktuálisan beállított szabályt el kellett mentenünk az iptables-save parancs használatával, hogy azután, a boot-olás során a /etc/init.d könyvtárban elhelyezett script révén állíthassuk be ezt automatikusan az iptabales-restore paranccsal.
Ennek lényegi mozzanata volt a /etc/init.d könyvtárban elmentett script elkészítése és hozzá kapcsolódóan egy hivatkozás link létrehozása az /etc/rc5.d könyvtárban, ami az aktuálisan használt futási szintnek felel meg